[{"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Footer.js":"1","/Users/sblan45/Desktop/Actualize/covid_data/src/App.js":"2","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Header.js":"3","/Users/sblan45/Desktop/Actualize/covid_data/src/index.js":"4","/Users/sblan45/Desktop/Actualize/covid_data/src/components/GraphCountry.js":"5","/Users/sblan45/Desktop/Actualize/covid_data/src/components/USAStates.js":"6","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Countries.js":"7","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Graph.js":"8"},{"size":200,"mtime":1612724376082,"results":"9","hashOfConfig":"10"},{"size":621,"mtime":1614655568423,"results":"11","hashOfConfig":"10"},{"size":404,"mtime":1614655604474,"results":"12","hashOfConfig":"10"},{"size":177,"mtime":1612728959615,"results":"13","hashOfConfig":"10"},{"size":3683,"mtime":1614740636003,"results":"14","hashOfConfig":"10"},{"size":5717,"mtime":1614740898439,"results":"15","hashOfConfig":"10"},{"size":3531,"mtime":1614740601515,"results":"16","hashOfConfig":"10"},{"size":4455,"mtime":1614740757888,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2iuuh2",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Footer.js",[],"/Users/sblan45/Desktop/Actualize/covid_data/src/App.js",[],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Header.js",[],"/Users/sblan45/Desktop/Actualize/covid_data/src/index.js",["35"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/GraphCountry.js",["36"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/USAStates.js",["37"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Countries.js",[],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Graph.js",["38","39"],"import React from \"react\"\nimport * as V from \"victory\";\nimport { VictoryLine, VictoryChart, VictoryAxis, VictoryBrushContainer, VictoryZoomContainer } from 'victory';\nimport './Graph.css'\nimport moment from 'moment'\n\nclass Graph extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n  handleZoom = (domain) => {\n    console.log('handlezoom', domain, 'selectedDomain', this.state.selectedDomain)\n    this.setState({selectedDomain: domain});\n  }\n  handleBrush = (domain) => {\n    console.log('handlebrush', domain, 'zoomdomain', this.state.zoomDomain)\n    this.setState({zoomDomain: domain});\n  }\n\n\n  render() {\n    // console.log(this.props.yAxis)\n    const covidData = this.props.covidData.map((data) => {\n      let yData = data.total\n      if (this.props.yAxis === 'death') {\n        yData = data.death\n      } else if ( this.props.yAxis === 'hospitalized') {\n        yData = data.hospitalizedCurrently\n      } else if ( this.props.yAxis === 'total') {\n        yData = data.total\n      } else if (this.props.yAxis === 'deathIncrease') {\n        yData = data.deathIncrease\n      } else if (this.props.yAxis === 'positiveIncrease') {\n        yData = data.positiveIncrease\n      } else if (this.props.yAxis === 'inIcuCurrently') {\n        yData = data.inIcuCurrently\n      } \n      const dateString = data.date.toString();\n      const year = dateString.substring(0, 4);\n      const yearNum = parseInt(year)\n      const month = dateString.substring(4, 6);\n      const monthNum = parseInt(month) - 1\n      const day = dateString.substring(6);\n      const dayNum = parseInt(day)\n      return {\n        x: new Date(yearNum, monthNum, dayNum), \n        y: yData,\n        day: day\n      }\n    })\n    // console.log(covidData.filter(data => data.day == 13))\n    return (\n      <div>\n        <div className=\"graph\">\n          <VictoryChart\n            width={600}\n            height={300}\n            padding={{top: 0, left: 100, right: 50, bottom: 30}}\n            scale={{x: \"time\"}}\n            containerComponent={\n              <VictoryZoomContainer responsive={false}\n                zoomDimension=\"x\"\n                zoomDomain={this.state.zoomDomain}\n                onZoomDomainChange={this.handleZoom}\n              />\n            }\n          >\n            <VictoryLine\n            className=\"victory\"\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          <VictoryChart\n            width={600}\n            height={90}\n            scale={{x: \"time\"}}\n            padding={{top: 0, left: 100, right: 50, bottom: 30}}\n            containerComponent={\n              <VictoryBrushContainer responsive={false}\n                brushDimension=\"x\"\n                brushDomain={this.state.selectedDomain}\n                onBrushDomainChange={this.handleBrush}\n              />\n            }\n          >\n            <VictoryAxis\n              tickValues={covidData.filter(data => {\n                let today = new Date()\n                let dd = parseInt(today.getDate())\n                return data.day === dd \n              }).map((data) => {\n                console.log(data.x)\n                return data.x \n              })}\n              // covidData.filter(data => {\n              //   let today = new Date()\n              //   let dd = parseInt(today.getDate())\n              //   let mm = parseInt(today.getMonth())\n              //   let yyyy = parseInt(today.getFullYear())\n              //   return data.day === yyyy //&& data.month <= mm && data.year <= yyyy\n              // }).map((data) => {\n              //   console.log(data.x)\n              //   return data.x \n              // })}\n              tickFormat={(x) => new Date(x).getMonth()}\n                            //REVIEW THIS \n              // tickFormat={\n              //   (x) => {\n              //     if (x.getFullYear() === 2000) {\n              //       return x.getFullYear();\n              //     }\n              //     if (x.getFullYear() % 5 === 0) {\n              //       return x.getFullYear().toString().slice(2);\n              //     }\n              //   }\n              // }\n            />\n            <VictoryLine\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Graph",{"ruleId":"40","severity":1,"message":"41","line":4,"column":13,"nodeType":"42","messageId":"43","endLine":4,"endColumn":14},{"ruleId":"44","severity":1,"message":"45","line":93,"column":61,"nodeType":"46","messageId":"47","endLine":93,"endColumn":63},{"ruleId":"44","severity":1,"message":"45","line":95,"column":27,"nodeType":"46","messageId":"47","endLine":95,"endColumn":29},{"ruleId":"40","severity":1,"message":"41","line":2,"column":13,"nodeType":"42","messageId":"43","endLine":2,"endColumn":14},{"ruleId":"40","severity":1,"message":"48","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":14},"no-unused-vars","'V' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'moment' is defined but never used."]