[{"/Users/sblan45/Desktop/Actualize/covid_data/src/index.js":"1","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Footer.js":"2","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Countries.js":"3","/Users/sblan45/Desktop/Actualize/covid_data/src/components/USDataBlock.js":"4","/Users/sblan45/Desktop/Actualize/covid_data/src/components/GraphCountry.js":"5","/Users/sblan45/Desktop/Actualize/covid_data/src/components/CountriesMap.js":"6","/Users/sblan45/Desktop/Actualize/covid_data/src/components/StateMap.js":"7","/Users/sblan45/Desktop/Actualize/covid_data/src/components/USAStates.js":"8","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Graph.js":"9","/Users/sblan45/Desktop/Actualize/covid_data/src/components/CountryDataBlock.js":"10","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Header.js":"11","/Users/sblan45/Desktop/Actualize/covid_data/src/App.js":"12"},{"size":178,"mtime":1615847421358,"results":"13","hashOfConfig":"14"},{"size":334,"mtime":1617676906373,"results":"15","hashOfConfig":"14"},{"size":7284,"mtime":1617762870571,"results":"16","hashOfConfig":"14"},{"size":2878,"mtime":1617761756012,"results":"17","hashOfConfig":"14"},{"size":4099,"mtime":1617676906375,"results":"18","hashOfConfig":"14"},{"size":1741,"mtime":1617762547648,"results":"19","hashOfConfig":"14"},{"size":2560,"mtime":1617758629688,"results":"20","hashOfConfig":"14"},{"size":11130,"mtime":1617763190782,"results":"21","hashOfConfig":"14"},{"size":4707,"mtime":1617668956052,"results":"22","hashOfConfig":"14"},{"size":2499,"mtime":1617763643517,"results":"23","hashOfConfig":"14"},{"size":622,"mtime":1617676906375,"results":"24","hashOfConfig":"14"},{"size":621,"mtime":1614655568423,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"2iuuh2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sblan45/Desktop/Actualize/covid_data/src/index.js",["62"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport * as V from \"victory\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n",["63","64"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Footer.js",[],["65","66"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Countries.js",["67"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/USDataBlock.js",[],["68","69"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/GraphCountry.js",["70"],"import React from 'react'\nimport { VictoryLine, VictoryChart, VictoryAxis, VictoryBrushContainer, VictoryZoomContainer } from 'victory';\n\nclass GraphCountry extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      months: {\n        0: \"Jan\",\n        1: \"Feb\",\n        2: \"Mar\",\n        3: \"Apr\",\n        4: \"May\",\n        5: \"June\",\n        6: \"July\",\n        7: \"Aug\",\n        8: \"Sep\",\n        9: \"Oct\",\n        10: \"Nov\",\n        11: \"Dec\"\n      }\n    }\n  }\n\n  handleZoom(domain) {\n    this.setState({selectedDomain: domain});\n  }\n\n  handleBrush(domain) {\n    this.setState({zoomDomain: domain});\n  }\n\n componentDidUpdate(prevProps) {\n   if (prevProps.country !== this.props.country) {\n     this.setState({\n       zoomDomain: null\n     })\n   }\n   if (prevProps.yAxisCountries !== this.props.yAxisCountries) {\n    this.setState({\n      zoomDomain: null\n    })\n  }\n }\n\n  render() {\n    const covidData = this.props.covidCountryData.map((data) => {\n      let yData = data.confirmed\n      if (this.props.yAxisCountries === 'Total') {\n        yData = data.confirmed\n      } else if ( this.props.yAxisCountries === 'Deaths') {\n        yData = data.deaths\n      } else if ( this.props.yAxisCountries === 'Recovered') {\n        yData = data.recovered\n      } else if (this.props.yAxisCountries === 'Daily Deaths') {\n        yData = data.new_deaths\n      } else if (this.props.yAxisCountries === 'Daily Cases') {\n        yData = data.new_confirmed\n      } \n      const dateString = data.date\n      const year = dateString.substring(0, 4);\n      // console.log(year)\n      const yearNum = parseInt(year)\n      const month = dateString.substring(5, 7);\n      // console.log(month)\n      const monthNum = parseInt(month) - 1\n      const day = dateString.substring(8, 10);\n      // console.log(day)\n      const dayNum = parseInt(day)\n      return {\n        x: new Date(yearNum, monthNum, dayNum), \n        y: yData,\n        day: day\n      }\n    })\n    // console.log(covidData.filter(data => data.day == 13))\n    return (\n      <div>\n        <div className=\"graph\">\n          <VictoryChart\n            width={600}\n            height={300}\n            padding={{top: 10, left: 100, right: 50, bottom: 30}}\n            scale={{x: \"time\"}}\n            containerComponent={\n              <VictoryZoomContainer responsive={false}\n                zoomDimension=\"x\"\n                zoomDomain={this.state.zoomDomain}\n                onZoomDomainChange={this.handleZoom.bind(this)}\n              />\n            }\n          >\n            <VictoryLine\n            className=\"victory\"\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          <VictoryChart\n            width={600}\n            height={90}\n            scale={{x: \"time\"}}\n            padding={{top: 0, left: 100, right: 50, bottom: 30}}\n            containerComponent={\n              <VictoryBrushContainer responsive={false}\n                brushDimension=\"x\"\n                brushDomain={this.state.selectedDomain}\n                onBrushDomainChange={this.handleBrush.bind(this)}\n              />\n            }\n          >\n            <VictoryAxis\n              tickValues={covidData.filter(data => data.day == 20).map((data) => {\n                return data.x\n              })}\n              tickFormat={(x) => `${this.state.months[x.getMonth()]}`}\n                            //REVIEW THIS \n              // tickFormat={\n              //   (x) => {\n              //     if (x.getFullYear() === 2000) {\n              //       return x.getFullYear();\n              //     }\n              //     if (x.getFullYear() % 5 === 0) {\n              //       return x.getFullYear().toString().slice(2);\n              //     }\n              //   }\n              // }\n            />\n            <VictoryLine\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          </div>\n      </div>\n    );\n  }\n}\n\n\nexport default GraphCountry","/Users/sblan45/Desktop/Actualize/covid_data/src/components/CountriesMap.js",["71","72"],"import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\n\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule\n} from \"react-simple-maps\";\n\n\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffedea\", \"#ff5233\"]);\n\nconst CountriesMap = ({riskLevels}) => {\n  const [data, setData] = useState([]);\n  console.log(riskLevels)\n\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then((data) => {\n      setData(data);\n    });\n  }, []);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 147\n      }}\n    >\n      <Sphere stroke=\"black\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      {data.length > 0 && (\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => {\n              let riskLevel = \"\"\n              const d = geo.properties.ISO_A2;\n              riskLevels.map(risk => {\n                if (risk.attributes.iso === d){\n                  riskLevel = risk.attributes.covid_thn\n                }\n              })\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={riskLevel === \"999\" ? \"grey\" : riskLevel === \"1\" ? \"yellow\" : riskLevel === \"2\" ? \"orange\" : riskLevel === \"3\" ? \"red\" : riskLevel === \"4\" ? \"maroon\" : \"white\"}\n                />\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default CountriesMap",["73","74"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/StateMap.js",["75","76"],"import React from \"react\";\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\nimport statenames from \"../data/statenames.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\n\nconst StateMap = ({ usStatesData }) => {\n  return (\n    <ComposableMap projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => {\n              let riskLevel = ''\n              const usState = statenames.find(s => s.val === geo.id)\n              usStatesData.map(state => {\n                if (state.state == usState.id) {\n                  riskLevel = state.riskLevels.overall\n                }\n              })\n              return (\n                <Geography\n                key={geo.rsmKey}\n                stroke=\"#4a4a4a\"\n                geography={geo}\n                fill={riskLevel === 5 ? \"maroon\" : riskLevel === 4 ? \"grey\" : riskLevel === 3 ? \"red\" : riskLevel === 2 ? \"orange\" : riskLevel === 1 ? \"#f5ef42\" : riskLevel === 0 ? \"green\" : \"white\"}\n            />\n            )\n            })}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const cur = statenames.find(s => s.val === geo.id);\n              return (\n                <g key={geo.rsmKey + \"-name\"}>\n                  {cur &&\n                    centroid[0] > -160 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                      <Marker coordinates={centroid}>\n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Annotation>\n                    ))}\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\n\nexport default StateMap",["77","78"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/USAStates.js",["79","80"],"import React from \"react\"\nimport axios from \"axios\"\nimport Graph from \"./Graph\"\nimport StateMap from \"./StateMap\"\nimport \"../styling/USAStates.css\"\nimport { Dropdown } from 'semantic-ui-react'\nimport USDataBlock from \"./USDataBlock\"\n\nclass USAStates extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      covidData: [],\n      usStatesData: [],\n      currentUsState: 'California',\n      usState: \"ca\",\n      yAxis: 'Total',\n      stateOptions: [],\n      deaths: 0,\n      cases: 0,\n      vaccinesDistributed: 0,\n      vaccinesCompleted: 0,\n      riskLevel: 0,\n      ICUCapacityPercentage: 0,\n      newCases: 0,\n      newDeaths: 0\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleStateUpdate = this.handleStateUpdate.bind(this)\n    this.handleYChange = this.handleYChange.bind(this)\n  }\n\n\n  componentDidMount() {\n\n    Promise.all([\n      axios.get(`https://api.covidactnow.org/v2/state/CA.timeseries.json?apiKey=7a39cf0e85284f04ae5c28ddf433ed36`),\n      axios.get(`https://api.covidactnow.org/v2/states.json?apiKey=7a39cf0e85284f04ae5c28ddf433ed36`)\n    ]).then(([response1, response2]) => {\n      this.setState({\n        covidData: response1.data.actualsTimeseries,\n        usStatesData: response2.data,\n        deaths: response1.data.actuals.deaths,\n        cases: response1.data.actuals.cases,\n        vaccinesDistributed: response1.data.actuals.vaccinesDistributed,\n        vaccinesCompleted: response1.data.actuals.vaccinationsCompleted,\n        riskLevel: response1.data.riskLevels.overall,\n        ICUCapacityPercentage: response1.data.metrics.icuCapacityRatio,\n        newCases: response1.data.actuals.newCases,\n        newDeaths: response1.data.actuals.newDeaths,\n      })\n      console.log(response2.data, 'response 2')\n\n      //API KEY:  7a39cf0e85284f04ae5c28ddf433ed36\n      // https://api.covidactnow.org/v2/state/MA.timeseries.json?apiKey=7a39cf0e85284f04ae5c28ddf433ed36\n\n      let currentState = ''\n      const states = [\n        {code: 'AL', state: 'Alabama'},\n        {code: 'AK', state: 'Alaska'},\n        {code: 'AZ', state: 'Arizona'},\n        {code: 'AR', state: 'Arkansas'},\n        {code: 'AS', state: 'American Samoa'},\n        {code: 'CA', state: 'California'},\n        {code: 'CO', state: 'Colorado'},\n        {code: 'CT', state: 'Connecticut'},\n        {code: 'DE', state: 'Delaware'},\n        {code: 'DC', state: 'Distric of Columbia'},\n        {code: 'FL', state: 'Florida'},\n        {code: 'GA', state: 'Georgia'},\n        {code: 'GU', state: 'Guam'},\n        {code: 'HI', state: 'Hawaii'},\n        {code: 'ID', state: 'Idaho'},\n        {code: 'IL', state: 'Illinois'},\n        {code: 'IN', state: 'Indiana'},\n        {code: 'IA', state: 'Iowa'},\n        {code: 'KS', state: 'Kansas'},\n        {code: 'KY', state: 'Kentucky'},\n        {code: 'LA', state: 'Louisiana'},\n        {code: 'ME', state: 'Maine'},\n        {code: 'MD', state: 'Maryland'},\n        {code: 'MA', state: 'Massachusetts'},\n        {code: 'MI', state: 'Michigan'},\n        {code: 'MP', state: 'Nothern Mariana Islands'},\n        {code: 'MN', state: 'Minnesota'},\n        {code: 'MO', state: 'Missouri'},\n        {code: 'MS', state: 'Mississippi'},\n        {code: 'MT', state: 'Montana'},\n        {code: 'NE', state: 'Nebraska'},\n        {code: 'NV', state: 'Nevada'},\n        {code: 'NH', state: 'New Hampshire'},\n        {code: 'NJ', state: 'New Jersey'},\n        {code: 'NM', state: 'New Mexico'},\n        {code: 'NY', state: 'New York'},\n        {code: 'NC', state: 'North Carolina'},\n        {code: 'ND', state: 'North Dakota'},\n        {code: 'OH', state: 'Ohio'},\n        {code: 'OK', state: 'Oklahoma'},\n        {code: 'OR', state: 'Oregon'},\n        {code: 'PA', state: 'Pennsylvania'},\n        {code: 'PR', state: 'Puerto Rico'},\n        {code: 'RI', state: 'Rhode Island'},\n        {code: 'SC', state: 'South Carolina'},\n        {code: 'SD', state: 'South Dakota'},\n        {code: 'TN', state: 'Tennessee'},\n        {code: 'TX', state: 'Texas'},\n        {code: 'UT', state: 'Utah'},\n        {code: 'VT', state: 'Vermont'},\n        {code: 'VA', state: 'Virginia'},\n        {code: 'WA', state: 'Washington'},\n        {code: 'WV', state: 'West Virginia'},\n        {code: 'WI', state: 'Wisconsin'},\n        {code: 'WY', state: 'Wyoming'},\n        {code: 'VI', state: 'Virgin Islands'}\n      ]\n\n      const optionsStates = this.state.usStatesData.map((usState) => {\n      for (let i = 0; i < states.length; i++) {\n        if (usState.state == states[i].code) {\n          currentState = states[i].state\n        }\n      }\n        return {key: usState.state, value: usState.state, text: currentState}\n      })  \n\n      this.setState({\n        stateOptions: optionsStates\n      })\n      // console.log('=====')\n      // console.log(this.state.countryOptions)\n      // console.log('====')\n      // console.log('-----')\n      // console.log(response1.data)\n      // console.log(response2.data.data.timeline)\n      // console.log(response3.data.data)\n      // console.log('-----')\n    })\n    }\n\n  handleChange = (e, { value }) => this.setState({ usState: value }, () => this.handleStateUpdate()\n  )\n\n  handleYChange(event) {\n    this.setState({yAxis: event.target.value})\n  }\n\n  handleStateUpdate() {\n    axios.get(`https://api.covidactnow.org/v2/state/${this.state.usState}.timeseries.json?apiKey=7a39cf0e85284f04ae5c28ddf433ed36`)\n      .then(response => {\n        this.setState({\n          covidData: response.data.actualsTimeseries,\n          currentCovidData: response.data,\n          deaths: response.data.actuals.deaths,\n          cases: response.data.actuals.cases,\n          vaccinesDistributed: response.data.actuals.vaccinesDistributed,\n          vaccinesCompleted: response.data.actuals.vaccinationsCompleted,\n          riskLevel: response.data.riskLevels.overall,\n          ICUCapacityPercentage: response.data.metrics.icuCapacityRatio,\n          newCases: response.data.actuals.newCases,\n          newDeaths: response.data.actuals.newDeaths      \n        })\n        console.log(response.data)\n      })  \n      this.handleCurrentState() \n  }\n\n  handleCurrentState = () => {\n    let currentState = ''\n    const states = [\n      {code: 'AL', state: 'Alabama'},\n      {code: 'AK', state: 'Alaska'},\n      {code: 'AZ', state: 'Arizona'},\n      {code: 'AR', state: 'Arkansas'},\n      {code: 'AS', state: 'American Samoa'},\n      {code: 'CA', state: 'California'},\n      {code: 'CO', state: 'Colorado'},\n      {code: 'CT', state: 'Connecticut'},\n      {code: 'DE', state: 'Delaware'},\n      {code: 'DC', state: 'Distric of Columbia'},\n      {code: 'FL', state: 'Florida'},\n      {code: 'GA', state: 'Georgia'},\n      {code: 'GU', state: 'Guam'},\n      {code: 'HI', state: 'Hawaii'},\n      {code: 'ID', state: 'Idaho'},\n      {code: 'IL', state: 'Illinois'},\n      {code: 'IN', state: 'Indiana'},\n      {code: 'IA', state: 'Iowa'},\n      {code: 'KS', state: 'Kansas'},\n      {code: 'KY', state: 'Kentucky'},\n      {code: 'LA', state: 'Louisiana'},\n      {code: 'ME', state: 'Maine'},\n      {code: 'MD', state: 'Maryland'},\n      {code: 'MA', state: 'Massachusetts'},\n      {code: 'MI', state: 'Michigan'},\n      {code: 'MP', state: 'Nothern Mariana Islands'},\n      {code: 'MN', state: 'Minnesota'},\n      {code: 'MO', state: 'Missouri'},\n      {code: 'MS', state: 'Mississippi'},\n      {code: 'MT', state: 'Montana'},\n      {code: 'NE', state: 'Nebraska'},\n      {code: 'NV', state: 'Nevada'},\n      {code: 'NH', state: 'New Hampshire'},\n      {code: 'NJ', state: 'New Jersey'},\n      {code: 'NM', state: 'New Mexico'},\n      {code: 'NY', state: 'New York'},\n      {code: 'NC', state: 'North Carolina'},\n      {code: 'ND', state: 'North Dakota'},\n      {code: 'OH', state: 'Ohio'},\n      {code: 'OK', state: 'Oklahoma'},\n      {code: 'OR', state: 'Oregon'},\n      {code: 'PA', state: 'Pennsylvania'},\n      {code: 'PR', state: 'Puerto Rico'},\n      {code: 'RI', state: 'Rhode Island'},\n      {code: 'SC', state: 'South Carolina'},\n      {code: 'SD', state: 'South Dakota'},\n      {code: 'TN', state: 'Tennessee'},\n      {code: 'TX', state: 'Texas'},\n      {code: 'UT', state: 'Utah'},\n      {code: 'VT', state: 'Vermont'},\n      {code: 'VA', state: 'Virginia'},\n      {code: 'WA', state: 'Washington'},\n      {code: 'WV', state: 'West Virginia'},\n      {code: 'WI', state: 'Wisconsin'},\n      {code: 'WY', state: 'Wyoming'},\n      {code: 'VI', state: 'Virgin Islands'}\n    ]\n\n      for (let i = 0; i < states.length; i++) {\n        if (this.state.usState == states[i].code) {\n          currentState = states[i].state\n        }\n      }\n    this.setState({\n      currentUsState: currentState\n    }) \n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  \n  render() {\n    return(\n      <div className=\"ui stackable grid top aligned\">\n        <div class=\"eight wide column\">\n          <h2 className=\"yAxis\">{this.state.yAxis}</h2>\n          <Graph     \n            covidData={this.state.covidData}\n            usState={this.state.usState}\n            yAxis={this.state.yAxis}\n          />   \n          <form onSubmit={this.handleSubmit}>\n            Choose a state:\n            <Dropdown\n              options={this.state.stateOptions}\n              placeholder='California'\n              search\n              selection\n              value={this.state.usState}\n              onChange={this.handleChange}\n              />\n          </form>  \n            \n          <form onSubmit={this.handleSubmit}>\n                  <label className=\"label\">Choose a category:\n                    <select className=\"ui selection dropdown\" value={this.state.yAxis} onChange={this.handleYChange}>\n                      <option value='Total'>Total</option>\n                      <option value='Hospitalized'>Hospitalized</option>\n                      <option value='Deaths'>Deaths</option>\n                      <option value='Daily Deaths'>Daily Deaths</option>\n                      <option value='Daily Cases'>Daily Cases</option>\n                      <option value='ICU Patients'>ICU Patients</option>\n                      <option value='Vaccinations Completed'>Vaccinations Completed</option>\n                      <option value='Vaccines Distributed'>Vaccinations Distributed</option>\n                    </select>\n                  </label> \n                </form>  \n        </div>\n        <div class=\"eight wide column\">\n          <USDataBlock \n            currentUsState={this.state.currentUsState}\n            usState={this.state.usState}\n            deaths={this.state.deaths}\n            cases={this.state.cases}\n            vaccinesDistributed={this.state.vaccinesDistributed}\n            vaccinesCompleted={this.state.vaccinesCompleted}\n            riskLevel={this.state.riskLevel}\n            ICUCapacityPercentage={this.state.ICUCapacityPercentage}\n            newCases={this.state.newCases}\n            newDeaths={this.state.newDeaths}\n          />\n          <h2 className=\"riskLevels\">Risk Levels</h2>\n          <StateMap \n            usStatesData={this.state.usStatesData}\n          />\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default USAStates;\n\n",["81","82"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Graph.js",["83","84"],"import React from \"react\"\nimport * as V from \"victory\";\nimport { VictoryLine, VictoryChart, VictoryAxis, VictoryBrushContainer, VictoryZoomContainer } from 'victory';\n\nclass Graph extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      zoomDomain: null,\n      months: {\n        0: \"Jan\",\n        1: \"Feb\",\n        2: \"Mar\",\n        3: \"Apr\",\n        4: \"May\",\n        5: \"June\",\n        6: \"July\",\n        7: \"Aug\",\n        8: \"Sep\",\n        9: \"Oct\",\n        10: \"Nov\",\n        11: \"Dec\"\n      }\n    };\n  }\n  handleZoom = (domain) => {\n    console.log('handlezoom', domain, 'selectedDomain', this.state.selectedDomain)\n    this.setState({selectedDomain: domain});\n  }\n  handleBrush = (domain) => {\n    console.log('handlebrush', domain, 'zoomdomain', this.state.zoomDomain)\n    this.setState({zoomDomain: domain});\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.usState !== this.props.usState) {\n      this.setState({\n        zoomDomain: null\n      })\n    }\n    if (prevProps.yAxis !== this.props.yAxis) {\n      this.setState({\n        zoomDomain: null\n      })\n    }\n  }\n\n  render() {\n    // console.log(this.props.yAxis)\n    const covidData = this.props.covidData.map((data) => {\n      let yData = data.cases\n      if (this.props.yAxis === 'Deaths') {\n        yData = data.deaths\n      } else if ( this.props.yAxis === 'Hospitalized') {\n        yData = data.hospitalBeds.currentUsageCovid\n      } else if ( this.props.yAxis === 'Total') {\n        yData = data.cases\n      } else if (this.props.yAxis === 'Daily Deaths') {\n        yData = data.newDeaths\n      } else if (this.props.yAxis === 'Daily Cases') {\n        yData = data.newCases\n      } else if (this.props.yAxis === 'ICU Patients') {\n        yData = data.icuBeds.currentUsageCovid\n      } else if (this.props.yAxis === 'Vaccinations Completed') {\n        if (data.vaccinationsCompleted) {\n          yData = data.vaccinationsCompleted\n        } else {\n          yData = null\n        }\n      } else if (this.props.yAxis === 'Vaccines Distributed') {\n        if (data.vaccinesDistributed) {\n          yData = data.vaccinesDistributed\n        } else {\n          yData = null\n        }\n      }\n      const dateString = data.date.toString();\n      const year = dateString.substring(0, 4);\n      const yearNum = parseInt(year)\n      const month = dateString.substring(5, 7);\n      const monthNum = parseInt(month) - 1\n      const day = dateString.substring(8);\n      const dayNum = parseInt(day)\n      return {\n        x: new Date(yearNum, monthNum, dayNum), \n        y: yData,\n        day: day\n      }\n    })\n    // console.log(covidData.filter(data => data.day == 13))\n    return (\n      <div>\n        <div>\n          <VictoryChart\n            width={600}\n            height={300}\n            padding={{top: 10, left: 100, right: 50, bottom: 30}}\n            scale={{x: \"time\"}}\n            containerComponent={\n              <VictoryZoomContainer responsive={false}\n                zoomDimension=\"x\"\n                zoomDomain={this.state.zoomDomain}\n                onZoomDomainChange={this.handleZoom}\n              />\n            }\n          >\n            \n            <VictoryLine\n            className=\"victory\"\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          <VictoryChart\n            width={600}\n            height={90}\n            scale={{x: \"time\"}}\n            padding={{top: 0, left: 100, right: 50, bottom: 30}}\n            containerComponent={\n              <VictoryBrushContainer responsive={false}\n                brushDimension=\"x\"\n                brushDomain={this.state.selectedDomain}\n                onBrushDomainChange={this.handleBrush}\n              />\n            }\n          >\n            <VictoryAxis\n              tickValues={covidData.filter(data => data.day == 20).map((data) => {\n                return data.x\n              })}\n              // tickValues={covidData.filter(data => {\n              //   let today = new Date()\n              //   let dd = parseInt(today.getDate())\n              //   return data.day === dd \n              // }).map((data) => {\n              //   console.log(data.x)\n              //   return data.x \n              // })}\n              tickFormat={(x) => `${this.state.months[x.getMonth()]}`}\n              \n            />\n            <VictoryLine\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n              // labels={( datum ) => `${this.state.months[datum.x]}`}\n            />\n          </VictoryChart>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Graph","/Users/sblan45/Desktop/Actualize/covid_data/src/components/CountryDataBlock.js",[],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Header.js",[],"/Users/sblan45/Desktop/Actualize/covid_data/src/App.js",[],{"ruleId":"85","severity":1,"message":"86","line":4,"column":13,"nodeType":"87","messageId":"88","endLine":4,"endColumn":14},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"89","replacedBy":"93"},{"ruleId":"91","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":113,"column":42,"nodeType":"97","messageId":"98","endLine":113,"endColumn":44},{"ruleId":"89","replacedBy":"99"},{"ruleId":"91","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":115,"column":61,"nodeType":"103","messageId":"104","endLine":115,"endColumn":63},{"ruleId":"85","severity":1,"message":"105","line":18,"column":7,"nodeType":"87","messageId":"88","endLine":18,"endColumn":17},{"ruleId":"95","severity":1,"message":"96","line":47,"column":35,"nodeType":"97","messageId":"98","endLine":47,"endColumn":37},{"ruleId":"89","replacedBy":"106"},{"ruleId":"91","replacedBy":"107"},{"ruleId":"95","severity":1,"message":"96","line":36,"column":38,"nodeType":"97","messageId":"98","endLine":36,"endColumn":40},{"ruleId":"101","severity":1,"message":"102","line":37,"column":33,"nodeType":"103","messageId":"104","endLine":37,"endColumn":35},{"ruleId":"89","replacedBy":"108"},{"ruleId":"91","replacedBy":"109"},{"ruleId":"101","severity":1,"message":"102","line":119,"column":27,"nodeType":"103","messageId":"104","endLine":119,"endColumn":29},{"ruleId":"101","severity":1,"message":"102","line":229,"column":32,"nodeType":"103","messageId":"104","endLine":229,"endColumn":34},{"ruleId":"89","replacedBy":"110"},{"ruleId":"91","replacedBy":"111"},{"ruleId":"85","severity":1,"message":"86","line":2,"column":13,"nodeType":"87","messageId":"88","endLine":2,"endColumn":14},{"ruleId":"101","severity":1,"message":"102","line":130,"column":61,"nodeType":"103","messageId":"104","endLine":130,"endColumn":63},"no-unused-vars","'V' is defined but never used.","Identifier","unusedVar","no-native-reassign",["112"],"no-negated-in-lhs",["113"],["112"],["113"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["112"],["113"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'colorScale' is assigned a value but never used.",["112"],["113"],["112"],["113"],["112"],["113"],"no-global-assign","no-unsafe-negation"]