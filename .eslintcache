<<<<<<< HEAD
[{"/Users/sblan45/Desktop/Actualize/covid_data/src/index.js":"1","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Countries.js":"2","/Users/sblan45/Desktop/Actualize/covid_data/src/components/GraphCountry.js":"3","/Users/sblan45/Desktop/Actualize/covid_data/src/components/CountryDataBlock.js":"4","/Users/sblan45/Desktop/Actualize/covid_data/src/components/StateMap.js":"5","/Users/sblan45/Desktop/Actualize/covid_data/src/components/USDataBlock.js":"6","/Users/sblan45/Desktop/Actualize/covid_data/src/components/CountriesMap.js":"7","/Users/sblan45/Desktop/Actualize/covid_data/src/components/USAStates.js":"8","/Users/sblan45/Desktop/Actualize/covid_data/src/components/Graph.js":"9"},{"size":178,"mtime":1615847421000,"results":"10","hashOfConfig":"11"},{"size":7890,"mtime":1618276022852,"results":"12","hashOfConfig":"11"},{"size":4099,"mtime":1617676906375,"results":"13","hashOfConfig":"11"},{"size":2826,"mtime":1618279885359,"results":"14","hashOfConfig":"11"},{"size":2558,"mtime":1618276022864,"results":"15","hashOfConfig":"11"},{"size":3198,"mtime":1619044020480,"results":"16","hashOfConfig":"11"},{"size":1726,"mtime":1618276022854,"results":"17","hashOfConfig":"11"},{"size":12123,"mtime":1619043946516,"results":"18","hashOfConfig":"11"},{"size":4707,"mtime":1617668956052,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"2iuuh2",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sblan45/Desktop/Actualize/covid_data/src/index.js",["42"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Countries.js",["43"],"import React from \"react\"\nimport axios from \"axios\"\nimport GraphCountry from \"./GraphCountry\"\nimport { Dropdown } from 'semantic-ui-react'\nimport \"../styling/Countries.css\"\nimport CountriesMap from \"./CountriesMap\"\nimport CountryDataBlock from './CountryDataBlock'\n\nclass Countries extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      countryData: [],\n      countriesData: [],\n      country: 'US',\n      currentCountry: 'United States',\n      yAxisCountries: 'Total',\n      countryOptions: [],\n      riskLevels: [],\n      dailyCases: 0,\n      dailyDeaths: 0,\n      totalCases: 0,\n      totalDeaths: 0,\n      totalCritical: 0,\n      deathRate: 0,\n      recoveryRate: 0,\n      casesPerMillion: 0\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleCountryUpdate = this.handleCountryUpdate.bind(this)\n    this.handleYCountryChange = this.handleYCountryChange.bind(this)\n  }\n\n  componentDidMount() {\n\n    Promise.all([\n      axios.get(`https://corona-api.com/countries/US`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }),\n      axios.get(`https://corona-api.com/countries`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }),\n      axios.get('https://onemap.cdc.gov/onemapservices/rest/services/Hosted/COVID_Global2/FeatureServer/0/query?f=json&returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=%7B%22xmin%22%3A-20037508.342787%2C%22ymin%22%3A-20037508.342781033%2C%22xmax%22%3A20037508.342781033%2C%22ymax%22%3A20037508.342787%2C%22spatialReference%22%3A%7B%22wkid%22%3A102100%2C%22latestWkid%22%3A3857%7D%7D&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*&returnCentroid=false&returnExceededLimitFeatures=false&outSR=102100&resultType=tile&quantizationParameters=%7B%22mode%22%3A%22view%22%2C%22originPosition%22%3A%22upperLeft%22%2C%22tolerance%22%3A78271.51696400007%2C%22extent%22%3A%7B%22xmin%22%3A-20037508.342787%2C%22ymin%22%3A-20037508.342781033%2C%22xmax%22%3A20037508.342781033%2C%22ymax%22%3A20037508.342787%2C%22spatialReference%22%3A%7B%22wkid%22%3A102100%2C%22latestWkid%22%3A3857%7D%7D%7D')\n    ]).then(([response1, response2, response3]) => {\n      this.setState({\n        countryData: response1.data.data.timeline,\n        countriesData: response2.data.data,\n        riskLevels: response3.data.features,\n        dailyCases: response1.data.data.today.confirmed,\n        dailyDeaths: response1.data.data.today.deaths,\n        totalCases: response1.data.data.latest_data.confirmed,\n        totalDeaths: response1.data.data.latest_data.deaths,\n        totalCritical: response1.data.data.latest_data.critical,\n        deathRate: response1.data.data.latest_data.calculated.death_rate,\n        recoveryRate: response1.data.data.latest_data.calculated.recovery_rate,\n        casesPerMillion: response1.data.data.latest_data.calculated.cases_per_million_population\n      })\n      console.log(response1, 'response 1')\n      console.log(response2, 'response 2')\n\n      const options = this.state.countriesData.map((country) => {\n        return {key: country.code, value: country.code, text: country.name}\n      })\n\n      this.setState({\n        countryOptions: options\n      })\n      // console.log('=====')\n      // console.log(this.state.countryOptions)\n      // console.log(this.state.stateOptions)\n      // console.log('====')\n      // console.log('-----')\n      // console.log(response1.data)\n      // console.log(response2.data.data.timeline)\n      // console.log(response3.data.data)\n      // console.log('-----')\n    })\n    }\n\n  handleCountryChange = (e, { value }) => this.setState({ country: value }, () => this.handleCountryUpdate()\n  )\n\n  handleYCountryChange(event) {\n    this.setState({yAxisCountries: event.target.value})\n  }\n\n  handleCountryUpdate() {\n    axios.get(`https://corona-api.com/countries/${this.state.country}`, {\n      headers: {'Content-Type': 'application/json'}\n    })\n      .then(response => {\n        this.setState({\n          countryData: response.data.data.timeline,\n          dailyCases: response.data.data.today.confirmed,\n          dailyDeaths: response.data.data.today.deaths,\n          totalCases: response.data.data.latest_data.confirmed,\n          totalDeaths: response.data.data.latest_data.deaths,\n          totalCritical: response.data.data.latest_data.critical,\n          deathRate: response.data.data.latest_data.calculated.death_rate,\n          recoveryRate: response.data.data.latest_data.calculated.recovery_rate,\n          casesPerMillion: response.data.data.latest_data.calculated.cases_per_million_population\n        })\n      })\n      this.handleCurrentCountry()\n  }\n\n  handleCurrentCountry = () => {\n    let currentNation = ''\n    this.state.countriesData.map(country => {\n      if (this.state.country === country.code) {\n        currentNation = country.name\n      }\n    })\n    this.setState({\n      currentCountry: currentNation\n    })\n\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  \n  render() {\n    return(\n      <div className=\"ui stackable grid top aligned\">\n        <div class=\"eight wide column\">\n          <h2 className=\"yAxis\">{this.state.yAxisCountries}</h2>\n          <GraphCountry \n            covidCountryData={this.state.countryData}\n            yAxisCountries={this.state.yAxisCountries}\n            country={this.state.country}\n          />\n          <form onSubmit={this.handleSubmit}>\n            Choose a country: \n            <Dropdown\n              options={this.state.countryOptions}\n              placeholder='USA'\n              search\n              selection\n              value={this.state.country}\n              onChange={this.handleCountryChange}\n            />\n          </form>  \n          <form onSubmit={this.handleSubmit}> \n            <label className=\"label\">Choose a category:\n              <select className=\"ui selection dropdown\" value={this.state.yAxisCountries} onChange={this.handleYCountryChange}>       \n                  <option className=\"text\" value='Total'>Total</option>\n                  <option className=\"text\" value='Deaths'>Death</option>\n                  <option className=\"text\" value='Recovered'>Recovered</option>\n                  <option className=\"text\" value='Daily Deaths'>Daily Deaths</option>                           \n                  <option className=\"text\" value='Daily Cases'>Daily Cases</option>                \n              </select>\n            </label> \n          </form>  \n        </div>\n\n        <div class=\"eight wide column\">\n          <CountryDataBlock  \n            dailyCases={this.state.dailyCases} \n            dailyDeaths={this.state.dailyDeaths} \n            totalCases={this.state.totalCases} \n            totalDeaths={this.state.totalDeaths} \n            totalCritical={this.state.totalCritical} \n            deathRate={this.state.deathRate} \n            recoveryRate={this.state.recoveryRate} \n            casesPerMillion={this.state.casesPerMillion}\n            country={this.state.country} \n            currentCountry={this.state.currentCountry}\n          />\n          <h2 className=\"riskLevels\"> Risk Levels</h2>\n          <div className=\"ui equal width center aligned padded grid\">\n            <div className=\"row\">\n              <div className=\"maroonCell column\">\n                VERY HIGH\n              </div>\n              <div className=\"redCell column\">\n                HIGH\n              </div>\n              <div className=\"orangeCell column\">\n                MODERATE\n              </div>\n              <div className=\"yellowCell column\">\n                LOW\n              </div>\n              <div className=\"greyCell column\">\n                UNKNOWN\n              </div>\n            </div>\n          </div>\n          <CountriesMap \n            riskLevels={this.state.riskLevels}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Countries;\n\n",["44","45"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/GraphCountry.js",["46"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/CountryDataBlock.js",[],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/StateMap.js",["47","48"],"import React from \"react\";\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\nimport statenames from \"../data/statenames.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\n\nconst StateMap = ({ usStatesData }) => {\n  return (\n    <ComposableMap projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => {\n              let riskLevel = ''\n              const usState = statenames.find(s => s.val === geo.id)\n              usStatesData.map(state => {\n                if (state.state == usState.id) {\n                  riskLevel = state.riskLevels.overall\n                }\n              })\n              return (\n                <Geography\n                key={geo.rsmKey}\n                stroke=\"white\"\n                geography={geo}\n                fill={riskLevel === 5 ? \"maroon\" : riskLevel === 4 ? \"grey\" : riskLevel === 3 ? \"red\" : riskLevel === 2 ? \"orange\" : riskLevel === 1 ? \"#f5ef42\" : riskLevel === 0 ? \"green\" : \"white\"}\n            />\n            )\n            })}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const cur = statenames.find(s => s.val === geo.id);\n              return (\n                <g key={geo.rsmKey + \"-name\"}>\n                  {cur &&\n                    centroid[0] > -160 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                      <Marker coordinates={centroid}>\n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Annotation>\n                    ))}\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\n\nexport default StateMap",["49","50"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/USDataBlock.js",[],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/CountriesMap.js",["51","52"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/USAStates.js",["53","54"],"/Users/sblan45/Desktop/Actualize/covid_data/src/components/Graph.js",["55","56"],{"ruleId":"57","severity":1,"message":"58","line":4,"column":13,"nodeType":"59","messageId":"60","endLine":4,"endColumn":14},{"ruleId":"61","severity":1,"message":"62","line":113,"column":42,"nodeType":"63","messageId":"64","endLine":113,"endColumn":44},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":115,"column":61,"nodeType":"71","messageId":"72","endLine":115,"endColumn":63},{"ruleId":"61","severity":1,"message":"62","line":36,"column":38,"nodeType":"63","messageId":"64","endLine":36,"endColumn":40},{"ruleId":"69","severity":1,"message":"70","line":37,"column":33,"nodeType":"71","messageId":"72","endLine":37,"endColumn":35},{"ruleId":"65","replacedBy":"73"},{"ruleId":"67","replacedBy":"74"},{"ruleId":"57","severity":1,"message":"75","line":3,"column":10,"nodeType":"59","messageId":"60","endLine":3,"endColumn":21},{"ruleId":"61","severity":1,"message":"62","line":43,"column":35,"nodeType":"63","messageId":"64","endLine":43,"endColumn":37},{"ruleId":"69","severity":1,"message":"70","line":122,"column":27,"nodeType":"71","messageId":"72","endLine":122,"endColumn":29},{"ruleId":"69","severity":1,"message":"70","line":233,"column":32,"nodeType":"71","messageId":"72","endLine":233,"endColumn":34},{"ruleId":"57","severity":1,"message":"58","line":2,"column":13,"nodeType":"59","messageId":"60","endLine":2,"endColumn":14},{"ruleId":"69","severity":1,"message":"70","line":130,"column":61,"nodeType":"71","messageId":"72","endLine":130,"endColumn":63},"no-unused-vars","'V' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["76"],["77"],"'scaleLinear' is defined but never used.","no-global-assign","no-unsafe-negation"]
=======
[{"/Users/polsubanajouy/covid_data_frontend/src/components/CountryDataBlock.js":"1","/Users/polsubanajouy/covid_data_frontend/src/index.js":"2","/Users/polsubanajouy/covid_data_frontend/src/components/Footer.js":"3","/Users/polsubanajouy/covid_data_frontend/src/components/GraphCountry.js":"4","/Users/polsubanajouy/covid_data_frontend/src/components/USDataBlock.js":"5","/Users/polsubanajouy/covid_data_frontend/src/components/Graph.js":"6","/Users/polsubanajouy/covid_data_frontend/src/components/Header.js":"7"},{"size":2826,"mtime":1618766144582,"results":"8","hashOfConfig":"9"},{"size":178,"mtime":1615860000807,"results":"10","hashOfConfig":"9"},{"size":323,"mtime":1618277560264,"results":"11","hashOfConfig":"9"},{"size":4099,"mtime":1618163448694,"results":"12","hashOfConfig":"9"},{"size":2878,"mtime":1618163448707,"results":"13","hashOfConfig":"9"},{"size":4707,"mtime":1618163448692,"results":"14","hashOfConfig":"9"},{"size":936,"mtime":1618767903680,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1sj0bgr",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/polsubanajouy/covid_data_frontend/src/components/CountryDataBlock.js",[],["31","32"],"/Users/polsubanajouy/covid_data_frontend/src/index.js",["33"],"/Users/polsubanajouy/covid_data_frontend/src/components/Footer.js",[],"/Users/polsubanajouy/covid_data_frontend/src/components/GraphCountry.js",["34"],"/Users/polsubanajouy/covid_data_frontend/src/components/USDataBlock.js",[],"/Users/polsubanajouy/covid_data_frontend/src/components/Graph.js",["35","36"],"/Users/polsubanajouy/covid_data_frontend/src/components/Header.js",["37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":4,"column":13,"nodeType":"44","messageId":"45","endLine":4,"endColumn":14},{"ruleId":"46","severity":1,"message":"47","line":115,"column":61,"nodeType":"48","messageId":"49","endLine":115,"endColumn":63},{"ruleId":"42","severity":1,"message":"43","line":2,"column":13,"nodeType":"44","messageId":"45","endLine":2,"endColumn":14},{"ruleId":"46","severity":1,"message":"47","line":130,"column":61,"nodeType":"48","messageId":"49","endLine":130,"endColumn":63},{"ruleId":"50","severity":1,"message":"51","line":12,"column":11,"nodeType":"52","endLine":12,"endColumn":81},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'V' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]
>>>>>>> ea655695e29cc51d5ce19e54bb56e4f19cb46d9f
