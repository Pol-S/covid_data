[{"/Users/polsubanajouy/covid_data_frontend/src/App.js":"1","/Users/polsubanajouy/covid_data_frontend/src/components/GraphCountry.js":"2","/Users/polsubanajouy/covid_data_frontend/src/components/Graph.js":"3","/Users/polsubanajouy/covid_data_frontend/src/components/Header.js":"4","/Users/polsubanajouy/covid_data_frontend/src/components/Home.js":"5","/Users/polsubanajouy/covid_data_frontend/src/components/DummyGraphCountry.js":"6"},{"size":7929,"mtime":1614536990977,"results":"7","hashOfConfig":"8"},{"size":3596,"mtime":1614049221615,"results":"9","hashOfConfig":"8"},{"size":4675,"mtime":1614046340187,"results":"10","hashOfConfig":"8"},{"size":515,"mtime":1614536308011,"results":"11","hashOfConfig":"8"},{"size":188,"mtime":1614536924779,"results":"12","hashOfConfig":"8"},{"size":271,"mtime":1614536897745,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sj0bgr",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/polsubanajouy/covid_data_frontend/src/App.js",[],"/Users/polsubanajouy/covid_data_frontend/src/components/GraphCountry.js",["29"],"import React from 'react'\nimport { VictoryLine, VictoryChart, VictoryAxis, VictoryBrushContainer, VictoryZoomContainer } from 'victory';\n\nclass GraphCountry extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n    }\n  }\n\n  handleZoom(domain) {\n    this.setState({selectedDomain: domain});\n  }\n\n  handleBrush(domain) {\n    this.setState({zoomDomain: domain});\n  }\n\n  handleFakeZoom() {\n    // const dummyDomain = {{[-1, 1]}};\n    // this.setState(selectedDomain: dummyDomain);\n  }\n\n  render() {\n    const covidData = this.props.covidCountryData.map((data) => {\n      let yData = data.confirmed\n      if (this.props.yAxisCountries === 'confirmed') {\n        yData = data.confirmed\n      } else if ( this.props.yAxisCountries === 'deaths') {\n        yData = data.deaths\n      } else if ( this.props.yAxisCountries === 'recovered') {\n        yData = data.recovered\n      } else if (this.props.yAxisCountries === 'new_deaths') {\n        yData = data.new_deaths\n      } \n      const dateString = data.date\n      const year = dateString.substring(0, 4);\n      // console.log(year)\n      const yearNum = parseInt(year)\n      const month = dateString.substring(5, 7);\n      // console.log(month)\n      const monthNum = parseInt(month) - 1\n      const day = dateString.substring(8, 10);\n      // console.log(day)\n      const dayNum = parseInt(day)\n      return {\n        x: new Date(yearNum, monthNum, dayNum), \n        y: yData,\n        day: day\n      }\n    })\n    // console.log(covidData.filter(data => data.day == 13))\n    return (\n      <div>\n        <div className=\"graph\">\n          <VictoryChart\n            width={600}\n            height={300}\n            padding={{top: 0, left: 100, right: 50, bottom: 30}}\n            scale={{x: \"time\"}}\n            containerComponent={\n              <VictoryZoomContainer responsive={false}\n                zoomDimension=\"x\"\n                zoomDomain={this.state.zoomDomain}\n                onZoomDomainChange={this.handleZoom.bind(this)}\n              />\n            }\n          >\n            <VictoryLine\n            className=\"victory\"\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          <VictoryChart\n            width={600}\n            height={90}\n            scale={{x: \"time\"}}\n            padding={{top: 0, left: 100, right: 50, bottom: 30}}\n            containerComponent={\n              <VictoryBrushContainer responsive={false}\n                brushDimension=\"x\"\n                brushDomain={this.state.selectedDomain}\n                onBrushDomainChange={this.handleBrush.bind(this)}\n              />\n            }\n          >\n            <VictoryAxis\n              tickValues={covidData.filter(data => data.day == 20).map((data) => {\n                return data.x\n              })}\n              tickFormat={(x) => new Date(x).getMonth()}\n                            //REVIEW THIS \n              // tickFormat={\n              //   (x) => {\n              //     if (x.getFullYear() === 2000) {\n              //       return x.getFullYear();\n              //     }\n              //     if (x.getFullYear() % 5 === 0) {\n              //       return x.getFullYear().toString().slice(2);\n              //     }\n              //   }\n              // }\n            />\n            <VictoryLine\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          </div>\n      </div>\n    );\n  }\n}\n\n\nexport default GraphCountry",["30","31"],"/Users/polsubanajouy/covid_data_frontend/src/components/Graph.js",["32","33","34","35"],"import React from \"react\"\nimport * as V from \"victory\";\nimport { VictoryLine, VictoryChart, VictoryAxis, VictoryBrushContainer, VictoryZoomContainer } from 'victory';\nimport './Graph.css'\nimport moment from 'moment'\n\nclass Graph extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n  handleZoom(domain) {\n    // console.log(domain)\n    this.setState({selectedDomain: domain});\n  }\n  handleBrush(domain) {\n    // console.log(domain)\n    this.setState({zoomDomain: domain});\n  }\n\n\n  render() {\n    // console.log(this.props.yAxis)\n    const covidData = this.props.covidData.map((data) => {\n      let yData = data.total\n      if (this.props.yAxis === 'death') {\n        yData = data.death\n      } else if ( this.props.yAxis === 'hospitalized') {\n        yData = data.hospitalizedCurrently\n      } else if ( this.props.yAxis === 'total') {\n        yData = data.total\n      } else if (this.props.yAxis === 'deathIncrease') {\n        yData = data.deathIncrease\n      } \n      const dateString = data.date.toString();\n      const year = dateString.substring(0, 4);\n      const yearNum = parseInt(year)\n      const month = dateString.substring(4, 6);\n      const monthNum = parseInt(month) - 1\n      const day = dateString.substring(6);\n      const dayNum = parseInt(day)\n      return {\n        x: new Date(yearNum, monthNum, dayNum), \n        y: yData,\n        day: day\n      }\n    })\n    // console.log(covidData.filter(data => data.day == 13))\n    return (\n      <div>\n        <div className=\"graph\">\n          <VictoryChart\n            width={600}\n            height={300}\n            padding={{top: 0, left: 100, right: 50, bottom: 30}}\n            scale={{x: \"time\"}}\n            containerComponent={\n              <VictoryZoomContainer responsive={false}\n                zoomDimension=\"x\"\n                zoomDomain={this.state.zoomDomain}\n                onZoomDomainChange={this.handleZoom.bind(this)}\n              />\n            }\n          >\n            <VictoryLine\n            className=\"victory\"\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          <VictoryChart\n            width={600}\n            height={90}\n            scale={{x: \"time\"}}\n            padding={{top: 0, left: 100, right: 50, bottom: 30}}\n            containerComponent={\n              <VictoryBrushContainer responsive={false}\n                brushDimension=\"x\"\n                brushDomain={this.state.selectedDomain}\n                onBrushDomainChange={this.handleBrush.bind(this)}\n              />\n            }\n          >\n            <VictoryAxis\n              yAxis\n              tickValues={covidData.filter(data => {\n                let today = new Date()\n                let dd = parseInt(today.getDate())\n                let mm = parseInt(today.getMonth())\n                let yyyy = parseInt(today.getFullYear())\n                return data.day === dd //&& data.month <= mm && data.year <= yyyy\n              }).map((data) => {\n                console.log(data.x)\n                return data.x \n              })}\n              // covidData.filter(data => {\n              //   let today = new Date()\n              //   let dd = parseInt(today.getDate())\n              //   let mm = parseInt(today.getMonth())\n              //   let yyyy = parseInt(today.getFullYear())\n              //   return data.day === yyyy //&& data.month <= mm && data.year <= yyyy\n              // }).map((data) => {\n              //   console.log(data.x)\n              //   return data.x \n              // })}\n              tickFormat={(x) => new Date(x).getMonth()}\n                            //REVIEW THIS \n              // tickFormat={\n              //   (x) => {\n              //     if (x.getFullYear() === 2000) {\n              //       return x.getFullYear();\n              //     }\n              //     if (x.getFullYear() % 5 === 0) {\n              //       return x.getFullYear().toString().slice(2);\n              //     }\n              //   }\n              // }\n            />\n            <VictoryLine\n              style={{\n                data: {stroke: \"tomato\"}\n              }}\n              data={covidData}\n            />\n          </VictoryChart>\n          </div>\n      </div>\n    );\n  }\n}\n// [\n//   new Date(2020, 3, 4),\n//   new Date(2020, 4, 4),\n//   new Date(2020, 5, 4),\n//   new Date(2020, 6, 4),\n//   new Date(2020, 7, 4),\n//   new Date(2020, 8, 4),\n//   new Date(2020, 9, 4),\n//   new Date(2020, 10, 4),\n//   new Date(2020, 11, 4),\n//   new Date(2020, 12, 4),\n//   new Date(2021, 1, 4),\n//   new Date(2021, 2, 4),\n// ]\nexport default Graph","/Users/polsubanajouy/covid_data_frontend/src/components/Header.js",[],"/Users/polsubanajouy/covid_data_frontend/src/components/Home.js",[],"/Users/polsubanajouy/covid_data_frontend/src/components/DummyGraphCountry.js",["36","37","38","39","40"],{"ruleId":"41","severity":1,"message":"42","line":91,"column":61,"nodeType":"43","messageId":"44","endLine":91,"endColumn":63},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":13,"nodeType":"51","messageId":"52","endLine":2,"endColumn":14},{"ruleId":"49","severity":1,"message":"53","line":5,"column":8,"nodeType":"51","messageId":"52","endLine":5,"endColumn":14},{"ruleId":"49","severity":1,"message":"54","line":92,"column":21,"nodeType":"51","messageId":"52","endLine":92,"endColumn":23},{"ruleId":"49","severity":1,"message":"55","line":93,"column":21,"nodeType":"51","messageId":"52","endLine":93,"endColumn":25},{"ruleId":"49","severity":1,"message":"56","line":2,"column":10,"nodeType":"51","messageId":"52","endLine":2,"endColumn":21},{"ruleId":"49","severity":1,"message":"57","line":2,"column":23,"nodeType":"51","messageId":"52","endLine":2,"endColumn":35},{"ruleId":"49","severity":1,"message":"58","line":2,"column":37,"nodeType":"51","messageId":"52","endLine":2,"endColumn":48},{"ruleId":"49","severity":1,"message":"59","line":2,"column":50,"nodeType":"51","messageId":"52","endLine":2,"endColumn":71},{"ruleId":"49","severity":1,"message":"60","line":2,"column":73,"nodeType":"51","messageId":"52","endLine":2,"endColumn":93},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'V' is defined but never used.","Identifier","unusedVar","'moment' is defined but never used.","'mm' is assigned a value but never used.","'yyyy' is assigned a value but never used.","'VictoryLine' is defined but never used.","'VictoryChart' is defined but never used.","'VictoryAxis' is defined but never used.","'VictoryBrushContainer' is defined but never used.","'VictoryZoomContainer' is defined but never used.","no-global-assign","no-unsafe-negation"]